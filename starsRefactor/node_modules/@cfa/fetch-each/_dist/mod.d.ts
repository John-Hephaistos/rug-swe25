export type RequestJson = {
  url: string;
  body?: string | object;
  /** defaults to post if body is given, get otherwise */ method?: "GET" | "POST" | "DELETE" | "PUT" | "PATCH";
  headers?: {
    [name: string]: string;
  };
};
type ResponseItem = {
  id: number;
  headers?: string;
  status: number;
  error?: string;
  result?: any;
  done: number;
  created_at: number;
};
type Update = {
  type: "update";
  status: {
    [key: string]: number;
  };
  done?: number;
  error?: string;
  results?: ResponseItem[];
};
/**
 * Do a single workflow
 */ export declare const fetchEach: <U = any>(/** JSON serializable array */ array: (string | RequestJson | null)[], /** Pass a logger to view updates */ config: {
  apiKey: string;
  basePath: string;
  log?: (log: Update) => void;
}) => Promise<{
  result?: U;
  error?: string;
  status: number;
  headers: {
    [name: string]: string;
  };
}[]>;
export { fetchLoop } from "./fetchLoop.js";
//# sourceMappingURL=mod.d.ts.map